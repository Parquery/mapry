package address

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

import (
	"fmt"
	"strings"
	"time"
)

// durationToString represents the duration as a string in ISO 8601 format.
//
// Since time.Duration stores intervals as nanoseconds and excludes longer
// intervals such as minutes, days or months, durationToString
// infers the integral number of these longer intervals and
// produces a compact representation.
func durationToString(d time.Duration) string {
	parts := make([]string, 0, 7)

	////
	// Interprete
	////

	sign := 1
	if d < 0 {
		d = -d
		sign = -1
	}

	days := d / (24 * time.Hour)
	rest := d % (24 * time.Hour)

	hours := rest / time.Hour
	rest = rest % time.Hour

	minutes := rest / time.Minute
	rest = rest % time.Minute

	seconds := rest / time.Second
	rest = rest % time.Second

	nanoseconds := rest

	////
	// Represent
	////

	if sign < 0 {
		parts = append(parts, "-")
	}

	parts = append(parts, "P")

	if days > 0 {
		parts = append(
			parts,
			fmt.Sprintf("%dD", days))
	}

	if hours > 0 || minutes > 0 || seconds > 0 || nanoseconds > 0 {
		parts = append(parts, "T")

		if hours > 0 {
			parts = append(
				parts,
				fmt.Sprintf("%dH", hours))
		}

		if minutes > 0 {
			parts = append(
				parts,
				fmt.Sprintf("%dM", minutes))
		}

		if nanoseconds == 0 {
			if seconds > 0 {
				parts = append(
					parts,
					fmt.Sprintf("%dS", seconds))
			}
		} else {
			parts = append(
				parts,
				strings.TrimRight(
					fmt.Sprintf("%d.%09d", seconds, nanoseconds),
					"0"))
			parts = append(parts, "S")
		}
	}

	return strings.Join(parts, "")
}

// PersonToJSONable converts the instance to
// a JSONable representation.
//
// PersonToJSONable requires:
//  * instance != nil
//
// PersonToJSONable ensures:
//  * target != nil
func PersonToJSONable(
	instance *Person) (
	target map[string]interface{}) {

	if instance == nil {
		panic("unexpected nil instance")
	}

	target = make(map[string]interface{})

	////
	// Serialize FullName
	////

	target["full_name"] = instance.FullName

	////
	// Serialize Address
	////

	target["address"] = AddressToJSONable(
		&instance.Address)

	////
	// Serialize Picture
	////

	if instance.Picture != nil {
		target["picture"] = (*instance.Picture)
	}

	////
	// Serialize Birthday
	////

	target["birthday"] = instance.Birthday.Format(
		"2006-01-02")

	////
	// Serialize LastModified
	////

	target["last_modified"] = instance.LastModified.Format(
		"2006-01-02T15:04:05Z")

	////
	// Serialize ContactPeriod
	////

	target["contact_period"] = durationToString(
		instance.ContactPeriod)

	////
	// Serialize Friends
	////

	target0 := make(map[string]interface{})
	map0 := instance.Friends
	for k0, v0 := range map0 {
		target0[k0] = v0.ID
	}
	target["friends"] = target0

	////
	// Serialize Active
	////

	target["active"] = instance.Active

	////
	// Serialize Height
	////

	target["height"] = instance.Height

	////
	// Serialize Fee
	////

	target["fee"] = instance.Fee

	return
}

// AddressToJSONable converts the instance to
// a JSONable representation.
//
// AddressToJSONable requires:
//  * instance != nil
//
// AddressToJSONable ensures:
//  * target != nil
func AddressToJSONable(
	instance *Address) (
	target map[string]interface{}) {

	if instance == nil {
		panic("unexpected nil instance")
	}

	target = make(map[string]interface{})

	////
	// Serialize Text
	////

	target["text"] = instance.Text

	////
	// Serialize TimeZone
	////

	target["time_zone"] = instance.TimeZone.String()

	return
}

// Pipeline converts the instance to a JSONable representation.
//
// Pipeline requires:
//  * instance != nil
//
// Pipeline ensures:
//  * (err == nil && target != nil) || (err != nil && target == nil)
func PipelineToJSONable(
	instance *Pipeline) (
	target map[string]interface{}, err error) {

	if instance == nil {
		panic("unexpected nil instance")
	}

	target = make(map[string]interface{})
	defer func() {
		if err != nil {
			target = nil
		}
	}()
	////
	// Serialize Maintainer
	////

	target["maintainer"] = instance.Maintainer.ID

	////
	// Serialize instance registry of Person
	////

	if len(instance.Persons) > 0 {
		targetPersons := make(map[string]interface{})
		for id := range instance.Persons {
			personInstance := instance.Persons[id]

			if id != personInstance.ID {
				err = fmt.Errorf(
					"expected the instance of Person to have the ID %s according to the registry, but got: %s",
					id, personInstance.ID)
				return
			}

			targetPersons[id] = PersonToJSONable(
				personInstance)
		}

		target["persons"] = targetPersons
	}

	return
}

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
