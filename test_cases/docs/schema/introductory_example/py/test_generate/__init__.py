# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""defines an address book."""


import collections
import datetime
import typing


class Person:
    """defines a contactable person."""

    def __init__(
            self,
            id: str,
            full_name: str,
            birthday: datetime.date,
            address: 'Address') -> None:
        """
        initializes an instance of Person with the given values.

        :param id: identifier of the instance:param full_name: gives the full name (including middle names).
        :param birthday: indicates the birthday in UTC.
        :param address: notes where the person lives.

        """
        self.id = id
        self.full_name = full_name
        self.birthday = birthday
        self.address = address


class Address:
    """defines an address."""

    def __init__(
            self,
            text: str) -> None:
        """
        initializes an instance of Address with the given values.

        :param text: gives the full address.

        """
        self.text = text


class Pipeline:
    """defines an address book."""

    def __init__(
            self,
            maintainer: Person,
            persons: typing.Optional[typing.MutableMapping[str, Person]] = None) -> None:
        """
        initializes an instance of Pipeline with the given values.

        The class registries are initialized with empty ordered dictionaries.
        :param maintainer: indicates the maintainer of the address book.
        :param persons:
            registry of instances of Person;
            if not specified, it is initialized as a ``collections.OrderedDict``.

        """
        self.maintainer = maintainer

        if persons is not None:
            self.persons = persons
        else:
            self.persons = collections.OrderedDict()


# File automatically generated by mapry. DO NOT EDIT OR APPEND!
