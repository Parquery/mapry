# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""serializes to JSONable objects."""


import collections
import typing

import book.address


def serialize_person(
        instance: book.address.Person,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of Person to a JSONable representation.

    :param instance: the instance of Person to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize full_name
    ##

    target['full_name'] = instance.full_name

    ##
    # Serialize birthday
    ##

    target['birthday'] = instance.birthday.strftime('%Y-%m-%d')

    ##
    # Serialize address
    ##

    target['address'] = serialize_address(instance.address)

    return target


def serialize_address(
        instance: book.address.Address,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of Address to a JSONable representation.

    :param instance: the instance of Address to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize text
    ##

    target['text'] = instance.text

    return target


def serialize_pipeline(
        instance: book.address.Pipeline,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of Pipeline to a JSONable.

    :param instance: the instance of Pipeline to be serialized
    :param ordered:
        If set, represents the instance properties and class registries
        as a ``collections.OrderedDict``.
        Otherwise, they are represented as a ``dict``.
    :return: JSONable representation
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize maintainer
    ##

    target['maintainer'] = instance.maintainer.id

    ##
    # Serialize instance registry of Person
    ##

    if len(instance.persons) > 0:
        if ordered:
            target_persons = (
                collections.OrderedDict()
            )  # type: typing.MutableMapping[str, typing.Any]
        else:
            target_persons = dict()

        for id, person_instance in instance.persons.items():
            if id != person_instance.id:
                raise ValueError(
                    'Expected ID {!r} of the instance of Person, but got: {!r}'.format(
                        id, person_instance.id))

            target_persons[id] = serialize_person(
                instance=person_instance,
                ordered=ordered)
        target['persons'] = target_persons

    return target


# File automatically generated by mapry. DO NOT EDIT OR APPEND!
