# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""parses JSONable objects."""


import typing

import some.graph
import some.graph.parse


def some_graph_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.SomeGraph]:
    """
    parses SomeGraph from a JSONable value.

    :param value: JSONable value
    :param ref: reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed SomeGraph, or None if ``errors``
    """
    if errors.full():
        return None

    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(type(value)))
        return None

    graph = some.graph.parse.placeholder_some_graph()

    ##
    # Parse array_of_strings
    ##

    value_0 = value.get(
        'array_of_strings',
        None)

    if value_0 is None:
        errors.add(
            ref,
            'Property is missing: array_of_strings')
    else:
        if not isinstance(value_0, list):
            errors.add(
                '/'.join((
                    ref, 'array_of_strings')),
                "Expected a list, but got: {}".format(
                    type(value_0)))
        else:
            target_1 = (
                []
            )  # type: typing.List[str]
            for i_1, item_1 in enumerate(
                    value_0):
                target_item_1 = (
                    None
                )  # type: typing.Optional[str]
                if not isinstance(item_1, str):
                    errors.add(
                        '/'.join((
                            ref, 'array_of_strings', str(i_1))),
                        "Expected a string, but got: {}".format(
                            type(item_1)))
                else:
                    target_item_1 = item_1

                if target_item_1 is not None:
                    target_1.append(
                        target_item_1)

                if errors.full():
                    break

            graph.array_of_strings = target_1

    if errors.full():
        return None

    if not errors.empty():
        return None

    return graph
