package somegraph

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

// Error represents a parsing error.
type Error struct {
	// references the cause (e.g., a reference path).
	Ref string

	// describes the error.
	Message string
}

// Errors collects parsing errors capped at a certain quantity.
//
// If the capacity is full, the subsequent surplus errors are ignored.
type Errors struct {
	// lists errors recorded during parsing.
	values []Error

	// indicates the capacity of the error container.
	cap uint64
}

// NewErrors initializes a new error container with the capacity `cap`.
//
// The capacity of 0 means infinite capacity.
func NewErrors(cap uint64) (e *Errors) {
	return &Errors{
		values: make([]Error, 0, cap),
		cap:    cap}
}

// Values gets the contained errors.
//
// The caller should not modify the returned errors.
func (e *Errors) Values() []Error {
	return e.values
}

// Add inserts the error into the container.
//
// ref indicates the cause (e.g., as a reference path).
// message describes the error.
// If the capacity is full, the subsequent surplus errors are ignored.
func (e *Errors) Add(ref string, message string) {
	if e.cap == 0 || uint64(len(e.values)) < e.cap {
		e.values = append(e.values, Error{Ref: ref, Message: message})
	}
}

// Full indicates whether the container is full.
func (e *Errors) Full() bool {
	return e.cap != 0 && uint64(len(e.values)) == e.cap
}

// Empty indicates whether no parsing errors occurred.
func (e *Errors) Empty() bool {
	return uint64(len(e.values)) == 0
}

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
