#pragma once

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

#include <map>
#include <memory>
#include <string>
#include <vector>

namespace some {
namespace graph {

struct SomeGraph;

class Empty;
class WithReference;

// defines an empty class.
class Empty {
public:
  // identifies the instance.
  std::string id;
};

// defines a class with a reference.
class WithReference {
public:
  // identifies the instance.
  std::string id;

  // references an Empty.
  Empty* reference_to_an_empty = nullptr;

  // lists empties.
  std::vector<Empty*> array_of_empties;

  // maps strings to empties.
  std::map<std::string, Empty*> map_of_empties;
};

// defines some object graph.
struct SomeGraph {
  // points to an empty.
  Empty* global_reference_to_an_empty = nullptr;

  // registers Empty instances.
  std::map<std::string, std::unique_ptr<Empty>> empties;

  // registers WithReference instances.
  std::map<std::string, std::unique_ptr<WithReference>> with_references;
};

}  // namespace graph
}  // namespace some

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
