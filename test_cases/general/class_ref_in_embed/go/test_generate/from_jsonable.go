package somegraph

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

import (
	"fmt"
	"strings"
)

// EmptyFromJSONable parses Empty from a JSONable value.
//
// If there are any errors, the state of the target is undefined.
//
// EmptyFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func EmptyFromJSONable(
	value interface{},
	id string,
	ref string,
	target *Empty,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	_, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	target.ID = id

	return
}

// EmbedWithRefFromJSONable parses EmbedWithRef from a JSONable value.
//
// If there are any errors, the state of the target is undefined.
//
// EmbedWithRefFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func EmbedWithRefFromJSONable(
	value interface{},
	emptiesRegistry map[string]*Empty,
	ref string,
	target *EmbedWithRef,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	////
	// Parse ReferenceToEmpty
	////

	value0, ok0 := cast[
		"reference_to_empty"]

	if !ok0 {
		errors.Add(
			ref,
			"property is missing: reference_to_empty")
	} else {
		cast1, ok1 := value0.(string)
		if !ok1 {
			errors.Add(
				strings.Join(
					[]string{
						ref, "reference_to_empty"},
					"/"),
				fmt.Sprintf(
					"expected a string, but got: %T",
					value0))
		} else {
			target1, ok1 := emptiesRegistry[cast1]
			if !ok1 {
				errors.Add(
					strings.Join(
						[]string{
							ref, "reference_to_empty"},
						"/"),
					fmt.Sprintf(
						"reference to an instance of class Empty not found: %s",
						value0))
			} else {
				target.ReferenceToEmpty = target1
			}
		}
	}

	if errors.Full() {
		return
	}

	return
}

// SomeGraphFromJSONable parses SomeGraph from a JSONable value.
//
// If there are any errors, the state of target is undefined.
//
// SomeGraphFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func SomeGraphFromJSONable(
	value interface{},
	ref string,
	target *SomeGraph,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	////
	// Pre-allocate Empties
	////

	emptiesRef := ref+"/empties";
	var emptiesOk bool
	var emptiesValue interface{}
	var emptiesMap map[string]interface{}

	emptiesValue, emptiesOk = cast[
		"empties"]
	if emptiesOk {
		emptiesMap, ok = emptiesValue.(map[string]interface{})
		if !ok {
			errors.Add(
				emptiesRef,
				fmt.Sprintf(
					"expected a map[string]interface{}, but got: %T",
					emptiesValue));
		} else {
			target.Empties = make(
				map[string]*Empty)

			for id := range emptiesMap {
				target.Empties[id] = &Empty{}
			}
		}
	}

	// Pre-allocating class instances is critical.
	// If the pre-allocation failed, we can not continue to parse the instances.
	if !errors.Empty() {
		return
	}

	////
	// Parse Empties
	////

	if emptiesOk {
		for id, value := range emptiesMap {
			EmptyFromJSONable(
				value,
				id,
				strings.Join([]string{
					emptiesRef, id}, "/"),
				target.Empties[id],
				errors)

			if errors.Full() {
				break
			}
		}
	}

	if errors.Full() {
		return
	}

	////
	// Parse SomeEmbed
	////

	value0, ok0 := cast[
		"some_embed"]

	if !ok0 {
		errors.Add(
			ref,
			"property is missing: some_embed")
	} else {
		EmbedWithRefFromJSONable(
			value0,
			target.Empties,
			strings.Join(
				[]string{
					ref, "some_embed"},
				"/"),
			&(target.SomeEmbed),
			errors)
	}

	if errors.Full() {
		return
	}

	return
}

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
