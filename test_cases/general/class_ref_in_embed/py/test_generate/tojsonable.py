# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""serializes to JSONable objects."""


import collections
import typing

import some.graph


def serialize_empty(
        instance: some.graph.Empty,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of Empty to a JSONable representation.

    :param instance: the instance of Empty to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    return target


def serialize_embed_with_ref(
        instance: some.graph.EmbedWithRef,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of EmbedWithRef to a JSONable representation.

    :param instance: the instance of EmbedWithRef to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize reference_to_empty
    ##

    target['reference_to_empty'] = instance.reference_to_empty.id

    return target


def serialize_some_graph(
        instance: some.graph.SomeGraph,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of SomeGraph to a JSONable.

    :param instance: the instance of SomeGraph to be serialized
    :param ordered:
        If set, represents the instance properties and class registries
        as a ``collections.OrderedDict``.
        Otherwise, they are represented as a ``dict``.
    :return: JSONable representation
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize some_embed
    ##

    target['some_embed'] = serialize_embed_with_ref(instance.some_embed)

    ##
    # Serialize instance registry of Empty
    ##

    if len(instance.empties) > 0:
        if ordered:
            target_empties = (
                collections.OrderedDict()
            )  # type: typing.MutableMapping[str, typing.Any]
        else:
            target_empties = dict()

        for id, empty_instance in instance.empties.items():
            if id != empty_instance.id:
                raise ValueError(
                    'Expected ID {!r} of the instance of Empty, but got: {!r}'.format(
                        id, empty_instance.id))

            target_empties[id] = serialize_empty(
                instance=empty_instance,
                ordered=ordered)
        target['empties'] = target_empties

    return target


# File automatically generated by mapry. DO NOT EDIT OR APPEND!
