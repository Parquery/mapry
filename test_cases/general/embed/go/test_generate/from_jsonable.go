package somegraph

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

import (
	"fmt"
	"strings"
)

// EmptyFromJSONable parses Empty from a JSONable value.
//
// If there are any errors, the state of the target is undefined.
//
// EmptyFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func EmptyFromJSONable(
	value interface{},
	ref string,
	target *Empty,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	_, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	return
}

// NonEmptyFromJSONable parses NonEmpty from a JSONable value.
//
// If there are any errors, the state of the target is undefined.
//
// NonEmptyFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func NonEmptyFromJSONable(
	value interface{},
	ref string,
	target *NonEmpty,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	////
	// Parse Empty
	////

	value0, ok0 := cast[
		"empty"]

	if !ok0 {
		errors.Add(
			ref,
			"property is missing: empty")
	} else {
		EmptyFromJSONable(
			value0,
			strings.Join(
				[]string{
					ref, "empty"},
				"/"),
			&(target.Empty),
			errors)
	}

	if errors.Full() {
		return
	}

	return
}

// SomeGraphFromJSONable parses SomeGraph from a JSONable value.
//
// If there are any errors, the state of target is undefined.
//
// SomeGraphFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func SomeGraphFromJSONable(
	value interface{},
	ref string,
	target *SomeGraph,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	////
	// Parse SomeEmbed
	////

	value0, ok0 := cast[
		"some_embed"]

	if !ok0 {
		errors.Add(
			ref,
			"property is missing: some_embed")
	} else {
		NonEmptyFromJSONable(
			value0,
			strings.Join(
				[]string{
					ref, "some_embed"},
				"/"),
			&(target.SomeEmbed),
			errors)
	}

	if errors.Full() {
		return
	}

	return
}

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
