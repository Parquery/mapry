# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""parses JSONable objects."""


import typing

import some.graph
import some.graph.parse


def _empty_from(
        value: typing.Any,
        ref: str,
        target: some.graph.Empty,
        errors: some.graph.parse.Errors
) -> None:
    """
    parses Empty from a JSONable value.

    If ``errors``, the attributes of ``target`` have undefined values.

    :param value: JSONable value
    :param ref:
        reference to the value (e.g., a reference path)
    :param target: parsed ``value`` as Empty
    :param errors: errors encountered during parsing
    :return:

    """
    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(
                type(value)))
        return


def empty_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.Empty]:
    """
    parses Empty from a JSONable value.

    :param value: JSONable value
    :param id: identifier of the instance
    :param ref:
        reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed instance, or None if ``errors``

    """
    target = some.graph.parse.placeholder_empty()

    _empty_from(
        value=value,
        ref=ref,
        target=target,
        errors=errors)

    if not errors.empty():
       return None

    return target


def _non_empty_from(
        value: typing.Any,
        ref: str,
        target: some.graph.NonEmpty,
        errors: some.graph.parse.Errors
) -> None:
    """
    parses NonEmpty from a JSONable value.

    If ``errors``, the attributes of ``target`` have undefined values.

    :param value: JSONable value
    :param ref:
        reference to the value (e.g., a reference path)
    :param target: parsed ``value`` as NonEmpty
    :param errors: errors encountered during parsing
    :return:

    """
    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(
                type(value)))
        return

    ##
    # Parse empty
    ##

    value_0 = value.get(
        'empty',
        None)

    if value_0 is None:
        errors.add(
            ref,
            'Property is missing: empty')
    else:
        target_1 = (
            some.graph.parse.placeholder_empty()
        )
        _empty_from(
            value_0,
            '/'.join((
                ref, 'empty')),
            target_1,
            errors)
        target.empty = target_1
    if errors.full():
        return


def non_empty_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.NonEmpty]:
    """
    parses NonEmpty from a JSONable value.

    :param value: JSONable value
    :param id: identifier of the instance
    :param ref:
        reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed instance, or None if ``errors``

    """
    target = some.graph.parse.placeholder_non_empty()

    _non_empty_from(
        value=value,
        ref=ref,
        target=target,
        errors=errors)

    if not errors.empty():
       return None

    return target


def some_graph_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.SomeGraph]:
    """
    parses SomeGraph from a JSONable value.

    :param value: JSONable value
    :param ref: reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed SomeGraph, or None if ``errors``
    """
    if errors.full():
        return None

    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(type(value)))
        return None

    graph = some.graph.parse.placeholder_some_graph()

    ##
    # Parse some_embed
    ##

    value_0 = value.get(
        'some_embed',
        None)

    if value_0 is None:
        errors.add(
            ref,
            'Property is missing: some_embed')
    else:
        target_1 = (
            some.graph.parse.placeholder_non_empty()
        )
        _non_empty_from(
            value_0,
            '/'.join((
                ref, 'some_embed')),
            target_1,
            errors)
        graph.some_embed = target_1

    if errors.full():
        return None

    if not errors.empty():
        return None

    return graph
