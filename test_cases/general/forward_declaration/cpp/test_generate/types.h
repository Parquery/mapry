#pragma once

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

#include <map>
#include <memory>
#include <string>
#include <vector>

namespace some {
namespace graph {

struct SomeGraph;

class SomeClass;
class OtherClass;

// defines a class referencing the other class.
class SomeClass {
public:
  // identifies the instance.
  std::string id;

  // references other class.
  OtherClass* reference_other = nullptr;

  // lists instances of other class.
  std::vector<OtherClass*> array_of_others;

  // maps strings to instances of other class.
  std::map<std::string, OtherClass*> map_of_others;
};

// defines a class with a reference to the some class.
class OtherClass {
public:
  // identifies the instance.
  std::string id;

  // references some class.
  SomeClass* reference_some = nullptr;

  // lists instances of some class.
  std::vector<SomeClass*> array_of_somes;

  // maps strings to instances of some class.
  std::map<std::string, SomeClass*> map_of_somes;
};

// defines some object graph.
struct SomeGraph {
  // registers SomeClass instances.
  std::map<std::string, std::unique_ptr<SomeClass>> some_classes;

  // registers OtherClass instances.
  std::map<std::string, std::unique_ptr<OtherClass>> other_classes;
};

}  // namespace graph
}  // namespace some

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
