# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""serializes to JSONable objects."""


import collections
import typing

import some.graph


def serialize_some_class(
        instance: some.graph.SomeClass,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of SomeClass to a JSONable representation.

    :param instance: the instance of SomeClass to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize reference_other
    ##

    target['reference_other'] = instance.reference_other.id

    ##
    # Serialize array_of_others
    ##

    target_0 = [
        item_0.id
        for item_0 in instance.array_of_others
    ]  # type: typing.List[str]
    target['array_of_others'] = target_0

    ##
    # Serialize map_of_others
    ##

    if isinstance(instance.map_of_others, collections.OrderedDict):
        target_1 = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, str]
    else:
        target_1 = dict()

    for key_1, value_1 in instance.map_of_others.items():
        target_1[key_1] = value_1.id
    target['map_of_others'] = target_1

    return target


def serialize_other_class(
        instance: some.graph.OtherClass,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of OtherClass to a JSONable representation.

    :param instance: the instance of OtherClass to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize reference_some
    ##

    target['reference_some'] = instance.reference_some.id

    ##
    # Serialize array_of_somes
    ##

    target_0 = [
        item_0.id
        for item_0 in instance.array_of_somes
    ]  # type: typing.List[str]
    target['array_of_somes'] = target_0

    ##
    # Serialize map_of_somes
    ##

    if isinstance(instance.map_of_somes, collections.OrderedDict):
        target_1 = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, str]
    else:
        target_1 = dict()

    for key_1, value_1 in instance.map_of_somes.items():
        target_1[key_1] = value_1.id
    target['map_of_somes'] = target_1

    return target


def serialize_some_graph(
        instance: some.graph.SomeGraph,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of SomeGraph to a JSONable.

    :param instance: the instance of SomeGraph to be serialized
    :param ordered:
        If set, represents the instance properties and class registries
        as a ``collections.OrderedDict``.
        Otherwise, they are represented as a ``dict``.
    :return: JSONable representation
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize instance registry of SomeClass
    ##

    if len(instance.some_classes) > 0:
        if ordered:
            target_some_classes = (
                collections.OrderedDict()
            )  # type: typing.MutableMapping[str, typing.Any]
        else:
            target_some_classes = dict()

        for id, some_class_instance in instance.some_classes.items():
            if id != some_class_instance.id:
                raise ValueError(
                    'Expected ID {!r} of the instance of SomeClass, but got: {!r}'.format(
                        id, some_class_instance.id))

            target_some_classes[id] = serialize_some_class(
                instance=some_class_instance,
                ordered=ordered)
        target['some_classes'] = target_some_classes

    ##
    # Serialize instance registry of OtherClass
    ##

    if len(instance.other_classes) > 0:
        if ordered:
            target_other_classes = (
                collections.OrderedDict()
            )  # type: typing.MutableMapping[str, typing.Any]
        else:
            target_other_classes = dict()

        for id, other_class_instance in instance.other_classes.items():
            if id != other_class_instance.id:
                raise ValueError(
                    'Expected ID {!r} of the instance of OtherClass, but got: {!r}'.format(
                        id, other_class_instance.id))

            target_other_classes[id] = serialize_other_class(
                instance=other_class_instance,
                ordered=ordered)
        target['other_classes'] = target_other_classes

    return target


# File automatically generated by mapry. DO NOT EDIT OR APPEND!
