package somegraph

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

import (
	"fmt"
	"math"
	"strings"
)

// SomeGraphFromJSONable parses SomeGraph from a JSONable value.
//
// If there are any errors, the state of target is undefined.
//
// SomeGraphFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func SomeGraphFromJSONable(
	value interface{},
	ref string,
	target *SomeGraph,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	////
	// Parse SomeMap
	////

	value0, ok0 := cast[
		"some_map"]

	if !ok0 {
		errors.Add(
			ref,
			"property is missing: some_map")
	} else {
		cast1, ok1 := value0.(map[string]interface{})
		if !ok1 {
			errors.Add(
				strings.Join(
					[]string{
						ref, "some_map"},
					"/"),
				fmt.Sprintf(
					"expected a map[string]interface{}, but got: %T",
					value0))
		} else {
			target1 := make(map[string]int64)
			for k1 := range cast1 {
				fcast2, ok2 := (cast1[k1]).(float64)
				if !ok2 {
					errors.Add(
						strings.Join(
							[]string{
								ref, "some_map", k1},
							"/"),
						fmt.Sprintf(
							"expected a float64, but got: %T",
							cast1[k1]))
				} else if fcast2 != math.Trunc(fcast2) {
					errors.Add(
						strings.Join(
							[]string{
								ref, "some_map", k1},
							"/"),
						fmt.Sprintf(
							"expected a whole number, but got: %f",
							fcast2))
				// 9223372036854775808.0 == 2^63 is the first float > MaxInt64.
				// -9223372036854775808.0 == -(2^63) is the last float >= MinInt64.
				} else if fcast2 >= 9223372036854775808.0 ||
					fcast2 < -9223372036854775808.0 {

					errors.Add(
						strings.Join(
							[]string{
								ref, "some_map", k1},
							"/"),
						fmt.Sprintf(
							"expected the value to fit into int64, but got an overflow: %f",
							fcast2))
				} else {
					cast2 := int64(fcast2)

					if !(cast2 >= 0) {
						errors.Add(
							strings.Join(
								[]string{
									ref, "some_map", k1},
								"/"),
							fmt.Sprintf(
								"expected >= 0, but got: %d",
								cast2))
					} else {
						target1[k1] = cast2
					}
				}

				if errors.Full() {
					break;
				}
			}

			target.SomeMap = target1
		}
	}

	if errors.Full() {
		return
	}

	////
	// Parse SomeNestedMap
	////

	value3, ok3 := cast[
		"some_nested_map"]

	if !ok3 {
		errors.Add(
			ref,
			"property is missing: some_nested_map")
	} else {
		cast4, ok4 := value3.(map[string]interface{})
		if !ok4 {
			errors.Add(
				strings.Join(
					[]string{
						ref, "some_nested_map"},
					"/"),
				fmt.Sprintf(
					"expected a map[string]interface{}, but got: %T",
					value3))
		} else {
			target4 := make(map[string]map[string]int64)
			for k4 := range cast4 {
				cast5, ok5 := (cast4[k4]).(map[string]interface{})
				if !ok5 {
					errors.Add(
						strings.Join(
							[]string{
								ref, "some_nested_map", k4},
							"/"),
						fmt.Sprintf(
							"expected a map[string]interface{}, but got: %T",
							cast4[k4]))
				} else {
					target5 := make(map[string]int64)
					for k5 := range cast5 {
						fcast6, ok6 := (cast5[k5]).(float64)
						if !ok6 {
							errors.Add(
								strings.Join(
									[]string{
										ref, "some_nested_map", k4, k5},
									"/"),
								fmt.Sprintf(
									"expected a float64, but got: %T",
									cast5[k5]))
						} else if fcast6 != math.Trunc(fcast6) {
							errors.Add(
								strings.Join(
									[]string{
										ref, "some_nested_map", k4, k5},
									"/"),
								fmt.Sprintf(
									"expected a whole number, but got: %f",
									fcast6))
						// 9223372036854775808.0 == 2^63 is the first float > MaxInt64.
						// -9223372036854775808.0 == -(2^63) is the last float >= MinInt64.
						} else if fcast6 >= 9223372036854775808.0 ||
							fcast6 < -9223372036854775808.0 {

							errors.Add(
								strings.Join(
									[]string{
										ref, "some_nested_map", k4, k5},
									"/"),
								fmt.Sprintf(
									"expected the value to fit into int64, but got an overflow: %f",
									fcast6))
						} else {
							cast6 := int64(fcast6)

							if !(cast6 >= 0) {
								errors.Add(
									strings.Join(
										[]string{
											ref, "some_nested_map", k4, k5},
										"/"),
									fmt.Sprintf(
										"expected >= 0, but got: %d",
										cast6))
							} else {
								target5[k5] = cast6
							}
						}

						if errors.Full() {
							break;
						}
					}

					target4[k4] = target5
				}

				if errors.Full() {
					break;
				}
			}

			target.SomeNestedMap = target4
		}
	}

	if errors.Full() {
		return
	}

	return
}

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
