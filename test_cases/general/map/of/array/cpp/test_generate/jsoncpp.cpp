// File automatically generated by mapry. DO NOT EDIT OR APPEND!

#include "jsoncpp.h"
#include "parse.h"
#include "types.h"

#include <cstring>
#include <memory>
#include <sstream>
#include <stdexcept>
#include <string>
#include <utility>

namespace some {
namespace graph {

namespace jsoncpp {

/**
 * generates an error message.
 *
 * @param cc char array as the description part of the message
 * @param cc_size size of the char array
 * @param s string as the detail part of the message
 * @return concatenated string
 */
std::string message(const char* cc, size_t cc_size, std::string s) {
  std::string result;
  result.reserve(cc_size + s.size());
  result.append(cc, cc_size);
  result.append(s);
  return result;
}

/**
 * converts a JSON value type to a human-readable string representation.
 *
 * @param value_type to be converted
 * @return string representation of the JSON value type
 */
std::string value_type_to_string(Json::ValueType value_type) {
  switch (value_type) {
    case Json::ValueType::nullValue: return "null";
    case Json::ValueType::intValue: return "int";
    case Json::ValueType::uintValue: return "uint";
    case Json::ValueType::realValue: return "real";
    case Json::ValueType::stringValue: return "string";
    case Json::ValueType::booleanValue: return "bool";
    case Json::ValueType::arrayValue: return "array";
    case Json::ValueType::objectValue: return "object";
    default:
      std::stringstream ss;
      ss << "Unhandled value type in value_to_string: "
        << value_type;
      throw std::domain_error(ss.str());
  }
}

void some_graph_from(
    const Json::Value& value,
    std::string ref,
    SomeGraph* target,
    parse::Errors* errors) {
  if (errors == nullptr) {
    throw std::invalid_argument("Unexpected null errors");
  }

  if (not errors->empty()) {
    throw std::invalid_argument("Unexpected non-empty errors");
  }

  if (not value.isObject()) {
    constexpr auto expected_but_got(
      "Expected an object, but got: ");

    errors->add(
      ref,
      message(
        expected_but_got,
        strlen(expected_but_got),
        value_type_to_string(
          value.type())));
    return;
  }

  ////
  // Parse map_of_arrays
  ////

  if (not value.isMember("map_of_arrays")) {
    errors->add(
      ref,
      "Property is missing: map_of_arrays");
  } else {
    const Json::Value& value_0 = value["map_of_arrays"];
    if (not value_0.isObject()) {
      constexpr auto expected_but_got(
        "Expected an object, but got: ");

      errors->add(
        std::string(ref)
          .append("/map_of_arrays"),
        message(
          expected_but_got,
          strlen(expected_but_got),
          value_type_to_string(
            value_0.type())));
    } else {
      std::map<std::string, std::vector<bool>>& target_0 = target->map_of_arrays;
      for (Json::ValueConstIterator it_0 = value_0.begin(); it_0 != value_0.end(); ++it_0) {
        const Json::Value& value_1 = *it_0;
        if (not value_1.isArray()) {
          constexpr auto expected_but_got(
            "Expected an array, but got: ");

          errors->add(
            std::string(ref)
              .append("/map_of_arrays")
              .append("/")
              .append(it_0.name()),
            message(
              expected_but_got,
              strlen(expected_but_got),
              value_type_to_string(
                value_1.type())));
        } else {
          std::vector<bool>& target_1 = target_0[it_0.name()];
          target_1.resize(value_1.size());
          size_t i_1 = 0;
          for (const Json::Value& item_1 : value_1) {
            if (not item_1.isBool()) {
              constexpr auto expected_but_got(
                "Expected a bool, but got: ");

              errors->add(
                std::string(ref)
                  .append("/map_of_arrays")
                  .append("/")
                  .append(it_0.name())
                  .append("/")
                  .append(std::to_string(i_1)),
                message(
                  expected_but_got,
                  strlen(expected_but_got),
                  value_type_to_string(
                    item_1.type())));
            } else {
              target_1.at(i_1) = item_1.asBool();
            }
            ++i_1;

            if (errors->full()) {
              break;
            }
          }

        }

        if (errors->full()) {
          break;
        }
      }
    }
  }
  if (errors->full()) {
    return;
  }
}

Json::Value serialize_some_graph(
    const SomeGraph& some_graph) {
  Json::Value some_graph_as_value;

  Json::Value target_0(Json::objectValue);
  const auto& map_0 = some_graph.map_of_arrays;
  for (const auto& kv_0 : map_0) {
    Json::Value target_1(Json::arrayValue);
    const auto& vector_1 = kv_0.second;
    for (int i_1 = 0;
        i_1 < vector_1.size();
        ++i_1) {
      target_1[i_1] = vector_1[i_1];
    }
    target_0[kv_0.first] = std::move(target_1);
  }
  some_graph_as_value["map_of_arrays"] = std::move(target_0);

  return some_graph_as_value;
}

}  // namespace jsoncpp

}  // namespace graph
}  // namespace some

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
