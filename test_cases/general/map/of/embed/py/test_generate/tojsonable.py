# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""serializes to JSONable objects."""


import collections
import typing

import some.graph


def serialize_empty(
        instance: some.graph.Empty,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of Empty to a JSONable representation.

    :param instance: the instance of Empty to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    return target


def serialize_some_graph(
        instance: some.graph.SomeGraph,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of SomeGraph to a JSONable.

    :param instance: the instance of SomeGraph to be serialized
    :param ordered:
        If set, represents the instance properties as a ``collections.OrderedDict``.
        Otherwise, they are represented as a ``dict``.
    :return: JSONable representation
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize map_of_embeds
    ##

    if isinstance(instance.map_of_embeds, collections.OrderedDict):
        target_0 = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.MutableMapping[str, typing.Any]]
    else:
        target_0 = dict()

    for key_0, value_0 in instance.map_of_embeds.items():
        target_0[key_0] = serialize_empty(value_0)
    target['map_of_embeds'] = target_0

    return target


# File automatically generated by mapry. DO NOT EDIT OR APPEND!
