#pragma once

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

#include <string>
#include <vector>

namespace some {
namespace graph {

namespace parse {

/**
 * represents an error occurred while parsing.
 */
struct Error {
  // references the cause (e.g., a reference path).
  const std::string ref;

  // describes the error.
  const std::string message;
};

/**
 * collects errors capped at a certain quantity.
 *
 * The space for the errors will not be reserved.
 * Make sure you reserve the necessary space by calling reserve()
 * at the initialization.
 */
class Errors {
public:
  explicit Errors(size_t cap);

  /**
   * reserves the space for the errors.
   *
   * You need to reserve the space only if you think there will
   * be an excessive amount of errors (e.g., >1000).
   */
   void reserve(size_t expected_errors);

  /**
   * adds an error to the container.
   *
   * If the container is already full, the error is ignored.
   */
  void add(const std::string& ref, const std::string& message);

  /**
   * @return true when there are exactly cap errors.
   */
  bool full() const;

  /**
   * @return true when there are no errors.
   */
  bool empty() const;

  const std::vector<Error>& get() const;

private:
  const size_t cap_;
  std::vector<Error> errors_;
};

}  // namespace parse

}  // namespace graph
}  // namespace some

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
