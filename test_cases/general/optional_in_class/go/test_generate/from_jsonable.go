package somegraph

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

import (
	"fmt"
	"strings"
)

// WithOptionalFromJSONable parses WithOptional from a JSONable value.
//
// If there are any errors, the state of the target is undefined.
//
// WithOptionalFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func WithOptionalFromJSONable(
	value interface{},
	id string,
	ref string,
	target *WithOptional,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	target.ID = id

	////
	// Parse SomeText
	////

	value0, ok0 := cast[
		"some_text"]

	if ok0 {
		var target0 string
		cast1, ok1 := value0.(string)
		if !ok1 {
			errors.Add(
				strings.Join(
					[]string{
						ref, "some_text"},
					"/"),
				fmt.Sprintf(
					"expected a string, but got: %T",
					value0))
		} else {
			target0 = cast1
		}

		target.SomeText = &target0
	}

	if errors.Full() {
		return
	}

	return
}

// SomeGraphFromJSONable parses SomeGraph from a JSONable value.
//
// If there are any errors, the state of target is undefined.
//
// SomeGraphFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func SomeGraphFromJSONable(
	value interface{},
	ref string,
	target *SomeGraph,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	////
	// Pre-allocate WithOptionals
	////

	withOptionalsRef := ref+"/with_optionals";
	var withOptionalsOk bool
	var withOptionalsValue interface{}
	var withOptionalsMap map[string]interface{}

	withOptionalsValue, withOptionalsOk = cast[
		"with_optionals"]
	if withOptionalsOk {
		withOptionalsMap, ok = withOptionalsValue.(map[string]interface{})
		if !ok {
			errors.Add(
				withOptionalsRef,
				fmt.Sprintf(
					"expected a map[string]interface{}, but got: %T",
					withOptionalsValue));
		} else {
			target.WithOptionals = make(
				map[string]*WithOptional)

			for id := range withOptionalsMap {
				target.WithOptionals[id] = &WithOptional{}
			}
		}
	}

	// Pre-allocating class instances is critical.
	// If the pre-allocation failed, we can not continue to parse the instances.
	if !errors.Empty() {
		return
	}

	////
	// Parse WithOptionals
	////

	if withOptionalsOk {
		for id, value := range withOptionalsMap {
			WithOptionalFromJSONable(
				value,
				id,
				strings.Join([]string{
					withOptionalsRef, id}, "/"),
				target.WithOptionals[id],
				errors)

			if errors.Full() {
				break
			}
		}
	}

	if errors.Full() {
		return
	}

	return
}

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
