# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""serializes to JSONable objects."""


import collections
import typing

import some.graph


def serialize_with_optional(
        instance: some.graph.WithOptional,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of WithOptional to a JSONable representation.

    :param instance: the instance of WithOptional to be serialized
    :param ordered:
        If set, represents the instance as a ``collections.OrderedDict``.
        Otherwise, it is represented as a ``dict``.
    :return: a JSONable
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize some_text
    ##

    if instance.some_text is not None:
        target['some_text'] = instance.some_text

    return target


def serialize_some_graph(
        instance: some.graph.SomeGraph,
        ordered: bool = False
) -> typing.MutableMapping[str, typing.Any]:
    """
    serializes an instance of SomeGraph to a JSONable.

    :param instance: the instance of SomeGraph to be serialized
    :param ordered:
        If set, represents the instance properties as a ``collections.OrderedDict``.
        Otherwise, they are represented as a ``dict``.
    :return: JSONable representation
    """
    if ordered:
        target = (
            collections.OrderedDict()
        )  # type: typing.MutableMapping[str, typing.Any]
    else:
        target = dict()

    ##
    # Serialize some_property
    ##

    target['some_property'] = serialize_with_optional(instance.some_property)

    return target


# File automatically generated by mapry. DO NOT EDIT OR APPEND!
