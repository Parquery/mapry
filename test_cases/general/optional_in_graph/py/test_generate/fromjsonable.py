# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""parses JSONable objects."""


import collections
import datetime
import pathlib
import re
import typing

import some.graph
import some.graph.parse


_DURATION_RE = re.compile(
    r'^(?P<sign>\+|-)?P'
    r'((?P<years>(0|[1-9][0-9]*)(\.[0-9]+)?)Y)?'
    r'((?P<months>(0|[1-9][0-9]*)(\.[0-9]+)?)M)?'
    r'((?P<weeks>(0|[1-9][0-9]*)(\.[0-9]+)?)W)?'
    r'((?P<days>(0|[1-9][0-9]*)(\.[0-9]+)?)D)?'
    r'(T'
    r'((?P<hours>(0|[1-9][0-9]*)(\.[0-9]+)?)H)?'
    r'((?P<minutes>(0|[1-9][0-9]*)(\.[0-9]+)?)M)?'
    r'(((?P<seconds>0|[1-9][0-9]*)(\.(?P<fraction>[0-9]+))?)S)?'
    r')?$')


def _duration_from_string(text: str) -> datetime.timedelta:
    """
    parses the duration from the string in ISO 8601 format.

    Following C++ chrono library, the following units are counted as:

    * years as 365.2425 days (the average length of a Gregorian year),
    * months as 30.436875 days (exactly 1/12 of years) and
    * weeks as 7 days.

    :param text: string to be parsed
    :return: duration
    :raise:
        ValueError if the string could not be parsed,
        ValueError if the fraction precision is higher than microseconds
        OverflowError if the duration does not fit into datetime.timedelta


    >>> _duration_from_string('P10Y')
    datetime.timedelta(3652, 36720)

    >>> _duration_from_string('P1M')
    datetime.timedelta(30, 37746)

    >>> _duration_from_string('P1W')
    datetime.timedelta(7)

    >>> _duration_from_string('P1D')
    datetime.timedelta(1)

    >>> _duration_from_string('PT1H1M1S')
    datetime.timedelta(0, 3661)

    >>> _duration_from_string('PT1H1M1.1S')
    datetime.timedelta(0, 3661, 100000)

    >>> _duration_from_string('PT')
    datetime.timedelta(0)

    >>> _duration_from_string('P1.1Y1.1M1.1W1.1DT1.1H1.1M1.1S')
    datetime.timedelta(444, 8114, 900000)

    >>> _duration_from_string('PT0.000001S')
    datetime.timedelta(0, 0, 1)

    >>> _duration_from_string('PT1.000S')
    datetime.timedelta(0, 1)

    >>> _duration_from_string('-P1D')
    datetime.timedelta(-1)

    """
    match = _DURATION_RE.match(text)

    if not match:
        raise ValueError(
            'Failed to match the duration: {!r}'.format(
                text))

    sign_grp = match.group('sign')
    if not sign_grp or sign_grp == '+':
        sign = 1
    else:
        sign = -1

    years_grp = match.group('years')
    years = float(years_grp) if years_grp else 0.0

    months_grp = match.group('months')
    months = float(months_grp) if months_grp else 0.0

    weeks_grp = match.group('weeks')
    weeks = float(weeks_grp) if weeks_grp else 0.0

    days_grp = match.group('days')
    days = float(days_grp) if days_grp else 0.0

    hours_grp = match.group('hours')
    hours = float(hours_grp) if hours_grp else 0.0

    minutes_grp = match.group('minutes')
    minutes = float(minutes_grp) if minutes_grp else 0.0

    seconds_grp = match.group('seconds')
    seconds = int(seconds_grp) if seconds_grp else 0

    fraction_grp = match.group('fraction')
    if not fraction_grp:
        microseconds = 0

    elif len(fraction_grp) > 6:
        raise ValueError(
            ('Precision only up to microseconds supported, '
             'but got: {}').format(text))

    else:
        stripped = fraction_grp.lstrip('0')
        if stripped:
            count = int(stripped)
            order = 6 - len(fraction_grp)
            microseconds = count * (10 ** order)
        else:
            microseconds = 0
    try:
        return sign * datetime.timedelta(
            days=years * 365.2425 + months * 30.436875 + weeks * 7 + days,
            seconds=seconds,
            minutes=minutes,
            hours=hours,
            microseconds=microseconds)

    except OverflowError as err:
        raise OverflowError(
            'Creating a timedelta overflowed from: {!r}'.format(
                text)) from err


def _empty_from(
        value: typing.Any,
        ref: str,
        target: some.graph.Empty,
        errors: some.graph.parse.Errors
) -> None:
    """
    parses Empty from a JSONable value.

    If ``errors``, the attributes of ``target`` have undefined values.

    :param value: JSONable value
    :param ref:
        reference to the value (e.g., a reference path)
    :param target: parsed ``value`` as Empty
    :param errors: errors encountered during parsing
    :return:

    """
    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(
                type(value)))
        return


def empty_from(
        value: typing.Any,
        id: str,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.Empty]:
    """
    parses Empty from a JSONable value.

    :param value: JSONable value
    :param id: identifier of the instance
    :param ref:
        reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed instance, or None if ``errors``

    """
    target = some.graph.parse.placeholder_empty(id=id)

    _empty_from(
        value=value,
        ref=ref,
        target=target,
        errors=errors)

    if not errors.empty():
       return None

    return target


def _some_embed_from(
        value: typing.Any,
        ref: str,
        target: some.graph.SomeEmbed,
        errors: some.graph.parse.Errors
) -> None:
    """
    parses SomeEmbed from a JSONable value.

    If ``errors``, the attributes of ``target`` have undefined values.

    :param value: JSONable value
    :param ref:
        reference to the value (e.g., a reference path)
    :param target: parsed ``value`` as SomeEmbed
    :param errors: errors encountered during parsing
    :return:

    """
    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(
                type(value)))
        return


def some_embed_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.SomeEmbed]:
    """
    parses SomeEmbed from a JSONable value.

    :param value: JSONable value
    :param id: identifier of the instance
    :param ref:
        reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed instance, or None if ``errors``

    """
    target = some.graph.parse.placeholder_some_embed()

    _some_embed_from(
        value=value,
        ref=ref,
        target=target,
        errors=errors)

    if not errors.empty():
       return None

    return target


def some_graph_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.SomeGraph]:
    """
    parses SomeGraph from a JSONable value.

    :param value: JSONable value
    :param ref: reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed SomeGraph, or None if ``errors``
    """
    if errors.full():
        return None

    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(type(value)))
        return None

    graph = some.graph.parse.placeholder_some_graph()

    ##
    # Pre-allocate empties
    ##

    registry_value = value.get('empties', None)

    if registry_value is not None:
        if not isinstance(registry_value, dict):
            errors.add(
                '/'.join((
                    ref, 'empties')),
                "Expected a dictionary, but got: {}".format(
                    type(registry_value)))
        else:
            if isinstance(registry_value, collections.OrderedDict):
                graph.empties = collections.OrderedDict()
            else:
                graph.empties = dict()

            empties_registry = graph.empties
            for id in registry_value:
                empties_registry[id] = some.graph.parse.placeholder_empty(id=id)

    if errors.full():
        return None

    # Errors from pre-allocation are considered critical.
    if not errors.empty():
        return None

    ##
    # Parse empties
    ##

    if 'empties' in value:
        registry_value = value['empties']
        for id, instance_value in registry_value.items():
            target_empty = graph.empties[id]
            target_empty.id = id

            _empty_from(
                instance_value,
                '/'.join((
                    ref, 'empties', repr(id))),
                target_empty,
                errors)

            if errors.full():
                return None

    ##
    # Parse optional_array
    ##

    value_0 = value.get(
        'optional_array',
        None)

    if value_0 is not None:
        if not isinstance(value_0, list):
            errors.add(
                '/'.join((
                    ref, 'optional_array')),
                "Expected a list, but got: {}".format(
                    type(value_0)))
        else:
            target_1 = (
                []
            )  # type: typing.List[int]
            for i_1, item_1 in enumerate(
                    value_0):
                target_item_1 = (
                    None
                )  # type: typing.Optional[int]
                if not isinstance(item_1, int):
                    errors.add(
                        '/'.join((
                            ref, 'optional_array', str(i_1))),
                        "Expected an integer, but got: {}".format(
                            type(item_1)))
                else:
                    target_item_1 = item_1

                if target_item_1 is not None:
                    target_1.append(
                        target_item_1)

                if errors.full():
                    break

            graph.optional_array = target_1

    if errors.full():
        return None

    ##
    # Parse optional_boolean
    ##

    value_3 = value.get(
        'optional_boolean',
        None)

    if value_3 is not None:
        if not isinstance(value_3, bool):
            errors.add(
                '/'.join((
                    ref, 'optional_boolean')),
                "Expected a bool, but got: {}".format(
                    type(value_3)))
        else:
            graph.optional_boolean = value_3

    if errors.full():
        return None

    ##
    # Parse optional_date
    ##

    value_5 = value.get(
        'optional_date',
        None)

    if value_5 is not None:
        if not isinstance(value_5, str):
            errors.add(
                '/'.join((
                    ref, 'optional_date')),
                "Expected a string, but got: {}".format(
                    type(value_5)))
        else:
            try:
                graph.optional_date = datetime.datetime.strptime(
                    value_5,
                    '%Y-%m-%d'
                ).date()
            except ValueError:
                errors.add(
                    '/'.join((
                        ref, 'optional_date')),
                    'Expected to strptime %Y-%m-%d, but got: {}'.format(
                        value_5))

    if errors.full():
        return None

    ##
    # Parse optional_datetime
    ##

    value_7 = value.get(
        'optional_datetime',
        None)

    if value_7 is not None:
        if not isinstance(value_7, str):
            errors.add(
                '/'.join((
                    ref, 'optional_datetime')),
                "Expected a string, but got: {}".format(
                    type(value_7)))
        else:
            try:
                graph.optional_datetime = datetime.datetime.strptime(
                    value_7,
                    '%Y-%m-%dT%H:%M:%SZ')
            except ValueError:
                errors.add(
                    '/'.join((
                        ref, 'optional_datetime')),
                    'Expected to strptime %Y-%m-%dT%H:%M:%SZ, but got: {}'.format(
                        value_7))

    if errors.full():
        return None

    ##
    # Parse optional_duration
    ##

    value_9 = value.get(
        'optional_duration',
        None)

    if value_9 is not None:
        if not isinstance(value_9, str):
            errors.add(
                '/'.join((
                    ref, 'optional_duration')),
                "Expected a string, but got: {}".format(
                    type(value_9)))
        else:
            try:
                graph.optional_duration = _duration_from_string(
                    value_9)
            except (ValueError, OverflowError) as err:
                errors.add(
                    '/'.join((
                        ref, 'optional_duration')),
                    str(err))

    if errors.full():
        return None

    ##
    # Parse optional_float
    ##

    value_11 = value.get(
        'optional_float',
        None)

    if value_11 is not None:
        if not isinstance(value_11, (int, float)):
            errors.add(
                '/'.join((
                    ref, 'optional_float')),
                'Expected a number, but got: {}'.format(
                    type(value_11)))
        else:
            graph.optional_float = float(value_11)

    if errors.full():
        return None

    ##
    # Parse optional_integer
    ##

    value_13 = value.get(
        'optional_integer',
        None)

    if value_13 is not None:
        if not isinstance(value_13, int):
            errors.add(
                '/'.join((
                    ref, 'optional_integer')),
                "Expected an integer, but got: {}".format(
                    type(value_13)))
        else:
            graph.optional_integer = value_13

    if errors.full():
        return None

    ##
    # Parse optional_map
    ##

    value_15 = value.get(
        'optional_map',
        None)

    if value_15 is not None:
        if not isinstance(value_15, dict):
            errors.add(
                '/'.join((
                    ref, 'optional_map')),
                "Expected a dict, but got: {}".format(
                    type(value_15)))
        else:
            if isinstance(value_15, collections.OrderedDict):
                target_16 = (
                    collections.OrderedDict()
                )  # type: typing.MutableMapping[str, int]
            else:
                target_16 = (
                    dict()
                )

            for key_16, value_16 in value_15.items():
                if not isinstance(key_16, str):
                    errors.add(
                        '/'.join((
                            ref, 'optional_map')),
                        "Expected the key to be a str, but got: {}".format(
                            type(key_16)))

                    if errors.full():
                        break
                    else:
                        continue

                target_item_16 = (
                    None
                )  # type: typing.Optional[int]
                if not isinstance(value_16, int):
                    errors.add(
                        '/'.join((
                            ref, 'optional_map', repr(key_16))),
                        "Expected an integer, but got: {}".format(
                            type(value_16)))
                else:
                    target_item_16 = value_16

                if target_item_16 is not None:
                    target_16[key_16] = target_item_16

                if errors.full():
                    break

            if target_16 is not None:
                graph.optional_map = target_16

    if errors.full():
        return None

    ##
    # Parse optional_path
    ##

    value_18 = value.get(
        'optional_path',
        None)

    if value_18 is not None:
        if not isinstance(value_18, str):
            errors.add(
                '/'.join((
                    ref, 'optional_path')),
                "Expected a string, but got: {}".format(
                    type(value_18)))
        else:
            graph.optional_path = pathlib.Path(
                value_18)

    if errors.full():
        return None

    ##
    # Parse optional_string
    ##

    value_20 = value.get(
        'optional_string',
        None)

    if value_20 is not None:
        if not isinstance(value_20, str):
            errors.add(
                '/'.join((
                    ref, 'optional_string')),
                "Expected a string, but got: {}".format(
                    type(value_20)))
        else:
            graph.optional_string = value_20

    if errors.full():
        return None

    ##
    # Parse optional_time
    ##

    value_22 = value.get(
        'optional_time',
        None)

    if value_22 is not None:
        if not isinstance(value_22, str):
            errors.add(
                '/'.join((
                    ref, 'optional_time')),
                "Expected a string, but got: {}".format(
                    type(value_22)))
        else:
            try:
                graph.optional_time = datetime.datetime.strptime(
                    value_22,
                    '%H:%M:%S'
                ).time()
            except ValueError:
                errors.add(
                    '/'.join((
                        ref, 'optional_time')),
                    'Expected to strptime %H:%M:%S, but got: {}'.format(
                        value_22))

    if errors.full():
        return None

    ##
    # Parse optional_time_zone
    ##

    value_24 = value.get(
        'optional_time_zone',
        None)

    if value_24 is not None:
        if not isinstance(value_24, str):
            errors.add(
                '/'.join((
                    ref, 'optional_time_zone')),
                "Expected a string, but got: {}".format(
                    type(value_24)))
        else:
            graph.optional_time_zone = value_24

    if errors.full():
        return None

    ##
    # Parse optional_reference
    ##

    value_26 = value.get(
        'optional_reference',
        None)

    if value_26 is not None:
        if not isinstance(value_26, str):
            errors.add(
                '/'.join((
                    ref, 'optional_reference')),
                "Expected a str, but got: {}".format(
                    type(value_26)))
        else:
            target_27 = graph.empties.get(
                value_26,
                None)
            if target_27 is None:
                errors.add(
                    '/'.join((
                        ref, 'optional_reference')),
                    'Reference to an instance of class Empty not found: {}'.format(
                        value_26))
            else:
                graph.optional_reference = target_27

    if errors.full():
        return None

    ##
    # Parse optional_embed
    ##

    value_28 = value.get(
        'optional_embed',
        None)

    if value_28 is not None:
        target_29 = (
            some.graph.parse.placeholder_some_embed()
        )
        _some_embed_from(
            value_28,
            '/'.join((
                ref, 'optional_embed')),
            target_29,
            errors)
        graph.optional_embed = target_29

    if errors.full():
        return None

    if not errors.empty():
        return None

    return graph
