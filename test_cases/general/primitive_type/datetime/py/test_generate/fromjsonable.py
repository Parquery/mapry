# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""parses JSONable objects."""


import datetime
import typing

import some.graph
import some.graph.parse


def some_graph_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.SomeGraph]:
    """
    parses SomeGraph from a JSONable value.

    :param value: JSONable value
    :param ref: reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed SomeGraph, or None if ``errors``
    """
    if errors.full():
        return None

    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(type(value)))
        return None

    graph = some.graph.parse.placeholder_some_graph()

    ##
    # Parse some_datetime
    ##

    value_0 = value.get(
        'some_datetime',
        None)

    if value_0 is None:
        errors.add(
            ref,
            'Property is missing: some_datetime')
    else:
        if not isinstance(value_0, str):
            errors.add(
                '/'.join((
                    ref, 'some_datetime')),
                "Expected a string, but got: {}".format(
                    type(value_0)))
        else:
            try:
                graph.some_datetime = datetime.datetime.strptime(
                    value_0,
                    '%Y/%m/%d %H-%M-%SZ')
            except ValueError:
                errors.add(
                    '/'.join((
                        ref, 'some_datetime')),
                    'Expected to strptime %Y/%m/%d %H-%M-%SZ, but got: {}'.format(
                        value_0))

    if errors.full():
        return None

    ##
    # Parse formatless_datetime
    ##

    value_2 = value.get(
        'formatless_datetime',
        None)

    if value_2 is None:
        errors.add(
            ref,
            'Property is missing: formatless_datetime')
    else:
        if not isinstance(value_2, str):
            errors.add(
                '/'.join((
                    ref, 'formatless_datetime')),
                "Expected a string, but got: {}".format(
                    type(value_2)))
        else:
            try:
                graph.formatless_datetime = datetime.datetime.strptime(
                    value_2,
                    '%Y-%m-%dT%H:%M:%SZ')
            except ValueError:
                errors.add(
                    '/'.join((
                        ref, 'formatless_datetime')),
                    'Expected to strptime %Y-%m-%dT%H:%M:%SZ, but got: {}'.format(
                        value_2))

    if errors.full():
        return None

    if not errors.empty():
        return None

    return graph
