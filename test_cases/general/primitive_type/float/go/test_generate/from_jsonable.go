package somegraph

// File automatically generated by mapry. DO NOT EDIT OR APPEND!

import (
	"fmt"
	"strings"
)

// SomeGraphFromJSONable parses SomeGraph from a JSONable value.
//
// If there are any errors, the state of target is undefined.
//
// SomeGraphFromJSONable requires:
//  * target != nil
//  * errors != nil
//  * errors.Empty()
func SomeGraphFromJSONable(
	value interface{},
	ref string,
	target *SomeGraph,
	errors *Errors) {

	if target == nil {
		panic("unexpected nil target")
	}

	if errors == nil {
		panic("unexpected nil errors")
	}

	if !errors.Empty() {
		panic("unexpected non-empty errors")
	}

	cast, ok := value.(map[string]interface{})
	if !ok {
		errors.Add(
			ref,
			fmt.Sprintf(
				"expected a map[string]interface{}, but got: %T",
				value))
		return
	}

	////
	// Parse SomeFloatGt0Lt100
	////

	value0, ok0 := cast[
		"some_float_gt_0_lt_100"]

	if !ok0 {
		errors.Add(
			ref,
			"property is missing: some_float_gt_0_lt_100")
	} else {
		cast1, ok1 := value0.(float64)
		if !ok1 {
			errors.Add(
				strings.Join(
					[]string{
						ref, "some_float_gt_0_lt_100"},
					"/"),
				fmt.Sprintf(
					"expected a float64, but got: %T",
					value0))
		} else {
			if !(cast1 > 0) {
				errors.Add(
					strings.Join(
						[]string{
							ref, "some_float_gt_0_lt_100"},
						"/"),
					fmt.Sprintf(
						"expected > 0.000000, but got: %f",
						cast1))
			} else if !(cast1 < 100) {
				errors.Add(
					strings.Join(
						[]string{
							ref, "some_float_gt_0_lt_100"},
							"/"),
					fmt.Sprintf(
						"expected < 100.000000, but got: %f",
						cast1))
			} else {
				target.SomeFloatGt0Lt100 = cast1
			}
		}
	}

	if errors.Full() {
		return
	}

	////
	// Parse SomeFloatGe0Le100
	////

	value2, ok2 := cast[
		"some_float_ge_0_le_100"]

	if !ok2 {
		errors.Add(
			ref,
			"property is missing: some_float_ge_0_le_100")
	} else {
		cast3, ok3 := value2.(float64)
		if !ok3 {
			errors.Add(
				strings.Join(
					[]string{
						ref, "some_float_ge_0_le_100"},
					"/"),
				fmt.Sprintf(
					"expected a float64, but got: %T",
					value2))
		} else {
			if !(cast3 >= 0) {
				errors.Add(
					strings.Join(
						[]string{
							ref, "some_float_ge_0_le_100"},
						"/"),
					fmt.Sprintf(
						"expected >= 0.000000, but got: %f",
						cast3))
			} else if !(cast3 <= 100) {
				errors.Add(
					strings.Join(
						[]string{
							ref, "some_float_ge_0_le_100"},
							"/"),
					fmt.Sprintf(
						"expected <= 100.000000, but got: %f",
						cast3))
			} else {
				target.SomeFloatGe0Le100 = cast3
			}
		}
	}

	if errors.Full() {
		return
	}

	////
	// Parse UnconstrainedFloat
	////

	value4, ok4 := cast[
		"unconstrained_float"]

	if !ok4 {
		errors.Add(
			ref,
			"property is missing: unconstrained_float")
	} else {
		cast5, ok5 := value4.(float64)
		if !ok5 {
			errors.Add(
				strings.Join(
					[]string{
						ref, "unconstrained_float"},
					"/"),
				fmt.Sprintf(
					"expected a float64, but got: %T",
					value4))
		} else {
			target.UnconstrainedFloat = cast5
		}
	}

	if errors.Full() {
		return
	}

	return
}

// File automatically generated by mapry. DO NOT EDIT OR APPEND!
