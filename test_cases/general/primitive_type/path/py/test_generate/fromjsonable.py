# File automatically generated by mapry. DO NOT EDIT OR APPEND!


"""parses JSONable objects."""


import pathlib
import re
import typing

import some.graph
import some.graph.parse


def some_graph_from(
        value: typing.Any,
        ref: str,
        errors: some.graph.parse.Errors
) -> typing.Optional[some.graph.SomeGraph]:
    """
    parses SomeGraph from a JSONable value.

    :param value: JSONable value
    :param ref: reference to the value (e.g., a reference path)
    :param errors: errors encountered during parsing
    :return: parsed SomeGraph, or None if ``errors``
    """
    if errors.full():
        return None

    if not isinstance(value, dict):
        errors.add(
            ref,
            "Expected a dictionary, but got: {}".format(type(value)))
        return None

    graph = some.graph.parse.placeholder_some_graph()

    ##
    # Parse some_path
    ##

    value_0 = value.get(
        'some_path',
        None)

    if value_0 is None:
        errors.add(
            ref,
            'Property is missing: some_path')
    else:
        if not isinstance(value_0, str):
            errors.add(
                '/'.join((
                    ref, 'some_path')),
                "Expected a string, but got: {}".format(
                    type(value_0)))
        else:
            if not re.match(
                    r'^/[a-zA-Z]+-[0-9]+$',
                    value_0):
                errors.add(
                    '/'.join((
                        ref, 'some_path')),
                    'Expected to match ^/[a-zA-Z]+-[0-9]+$, but got: {}'.format(
                        value_0))
            else:
                graph.some_path = pathlib.Path(
                    value_0)

    if errors.full():
        return None

    ##
    # Parse unconstrained_path
    ##

    value_2 = value.get(
        'unconstrained_path',
        None)

    if value_2 is None:
        errors.add(
            ref,
            'Property is missing: unconstrained_path')
    else:
        if not isinstance(value_2, str):
            errors.add(
                '/'.join((
                    ref, 'unconstrained_path')),
                "Expected a string, but got: {}".format(
                    type(value_2)))
        else:
            graph.unconstrained_path = pathlib.Path(
                value_2)

    if errors.full():
        return None

    if not errors.empty():
        return None

    return graph
